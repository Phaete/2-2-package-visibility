package com.phaete;

import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Objects;

public class Library {

    // Variables
    private Book[] books;

    // Constructor
    public Library(Book[] books) {
        this.books = books;
    }

    // Methods
    public void addBook(Book book) {
        Book[] newBooks = Arrays.copyOf(books, books.length + 1);
        newBooks[newBooks.length - 1] = book;
        books = newBooks;
    }

    public void removeBook(Book book) {
        for (int i = 0; i < books.length; i++) {
            if (books[i].equals(book)) {
                // Once found, switch the current book with the last one and create a copy of the array without the
                // last book in it
                Book temp = books[i];
                books[i] = books[books.length - 1];
                books[books.length - 1] = temp;
                books = Arrays.copyOf(books, books.length - 1);
            }
        }
    }

    public Book getBookByIsbn(String isbn) {
        for (Book book : books) {
            if (book.getIsbn().equals(isbn)) {
                return book;
            }
        }
        return null;
    }


    // Autogenerated
    public Book[] getBooks() {
        return books;
    }

    public void setBooks(Book[] books) {
        this.books = books;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Library library = (Library) o;
        return Objects.deepEquals(books, library.books);
    }

    @Override
    public int hashCode() {
        return Arrays.hashCode(books);
    }

    @Override
    public String toString() {
        return "Library{" +
                "books=" + Arrays.toString(books) +
                '}';
    }
}
